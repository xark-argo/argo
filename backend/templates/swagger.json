{
    "info": {
        "description": "Documentation for the Argo API",
        "title": "Argo API",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:11636/",
            "description": "Local environment"
        }
    ],
    "paths": {
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "description": "Authenticate user and return JWT token",
                "requestBody": {
                    "description": "Login data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/guest-token": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Obtain guest user token",
                "description": "Log in as a guest using a verification code and receive a JWT token.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuestToken"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User registration",
                "description": "Register a new user and return JWT token",
                "requestBody": {
                    "description": "Register data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Register"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/prompt-template": {
            "get": {
                "tags": [
                    "Bot"
                ],
                "summary": "Retrieve bot prompt template",
                "description": "This endpoint retrieves the prompt template for the bot. The `has_context` query parameter indicates whether the returned templates contain context information.",
                "parameters": [
                    {
                        "name": "has_context",
                        "in": "query",
                        "required": false,
                        "description": "Indicates whether the prompt contains context. Defaults to `true`.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A prompt template was successfully retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "prompt": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/create": {
            "post": {
                "tags": [
                    "Bot"
                ],
                "summary": "Create a bot",
                "description": "Create a new bot",
                "requestBody": {
                    "description": "New bot data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBot"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success payload containing newly created bot information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bot"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/{bot_id}/get": {
            "get": {
                "tags": [
                    "Bot"
                ],
                "summary": "Get bot details",
                "description": "Get the bot and model config",
                "parameters": [
                    {
                        "name": "bot_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success payload containing newly created bot information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotModelConfig"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/list": {
            "post": {
                "tags": [
                    "Bot"
                ],
                "summary": "List all Bots",
                "description": "Retrieve a list of all Bots",
                "requestBody": {
                    "description": "New bot data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListBot"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success payload containing newly created bot information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bot"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/update": {
            "post": {
                "tags": [
                    "Bot"
                ],
                "summary": "Update an existing Bot",
                "description": "Update the details of an existing Bot",
                "requestBody": {
                    "description": "Update bot data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bot"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success payload containing newly Updated bot information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bot"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/delete": {
            "post": {
                "tags": [
                    "Bot"
                ],
                "summary": "Delete an existing Bot",
                "description": "Delete the details of an existing Bot",
                "requestBody": {
                    "description": "Delete bot data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteBot"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bot deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/{bot_id}/export": {
            "get": {
                "tags": [
                    "Bot"
                ],
                "summary": "Export a Bot Configuration",
                "description": "Exports the configuration file of a specified bot by its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bot_id",
                        "required": true,
                        "description": "The ID of the bot to export.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The bot configuration file is successfully exported.",
                        "headers": {
                            "Content-Disposition": {
                                "description": "Indicates that the response is an attachment with the file name.",
                                "type": "string"
                            }
                        },
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/import": {
            "post": {
                "tags": [
                    "Bot"
                ],
                "summary": "Import Bot(s)",
                "description": "Upload a .zip/.yaml/.png file to import one or more bots.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "space_id",
                                    "files"
                                ],
                                "properties": {
                                    "space_id": {
                                        "type": "string",
                                        "description": "ID of the space to which the bot belongs"
                                    },
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        },
                                        "description": "List of bot configuration files (.zip, .yaml, .png)"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully imported bot(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImportBots"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/{bot_id}/share": {
            "get": {
                "tags": [
                    "Bot"
                ],
                "summary": "Share a Bot",
                "description": "Share a Bot by its ID and return its public details.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bot_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The ID of the Bot to share."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bot shared successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bot"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/knowledge/update": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "Update knowledge model information",
                "description": "Update knowledge model information for a specific bot.",
                "requestBody": {
                    "description": "Update bot knowledge data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateKnowledge"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/model_config/update": {
            "post": {
                "tags": [
                    "ModelConfig"
                ],
                "summary": "Update model configuration",
                "description": "Update the model configuration for a specific bot.",
                "requestBody": {
                    "description": "Update bot knowledge data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateModelConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateModelConfigResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/chat/say": {
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Send a chat message",
                "description": "Send a message to the bot for processing in a chat context.\n",
                "requestBody": {
                    "description": "Say chat data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SayChat"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "stream event"
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/webapi/chat/say": {
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Send a chat message",
                "description": "Send a message to the bot for processing in a chat context.\n\nGuest Access: ✅ Allowed\n",
                "requestBody": {
                    "description": "Say chat data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebSayChat"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "stream event"
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/chat/message/stop": {
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Stop a chat message",
                "description": "Stops a specific chat message based on task_id and bot_id\n\nGuest Access: ✅ Allowed\n",
                "requestBody": {
                    "description": "Say chat data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StopChat"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/chat/message/{message_id}/get": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get chat message detail",
                "description": "Retrieve details of the specified chat message.",
                "parameters": [
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPromptMessagesSuccessSchema"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/conversations": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Retrieve a list of conversations",
                "description": "This endpoint retrieves a list of conversations. The results can be filtered by           providing a `last_id` to paginate through the conversations.\n\nGuest Access: ✅ Allowed\n",
                "parameters": [
                    {
                        "name": "last_id",
                        "in": "query",
                        "required": false,
                        "description": "The ID of the last conversation from the previous page. Used for pagination.",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "description": "The number of conversations to retrieve. Defaults to 10.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConversationsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Create a new conversation",
                "description": "Creates a new conversation with the given web and user_id.\n\nGuest Access: ✅ Allowed\n",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/conversation/{conversation_id}": {
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Delete an existing Conversation",
                "description": "Delete an existing Conversation\n\nGuest Access: ✅ Allowed\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/conversation/{conversation_id}/name": {
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Update the name of a conversation",
                "description": "This endpoint updates the name of a specific conversation.           You can also specify whether the name should be auto-generated.\n\nGuest Access: ✅ Allowed\n",
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The new name of the conversation.",
                                    "example": "New Conversation Name"
                                },
                                "auto_generate": {
                                    "type": "boolean",
                                    "description": "Whether the name should be auto-generated.",
                                    "example": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "bot_id": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/conversation/{conversation_id}/messages": {
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Clear all messages in a specific conversation",
                "description": "Clears all messages related to a specified bot in the conversation.\n\nGuest Access: ✅ Allowed\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "conversation_id",
                        "required": true,
                        "type": "string",
                        "description": "The unique identifier of the conversation."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages cleared successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/conversation/{conversation_id}/branch": {
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Create a branch from an existing conversation",
                "description": "Creates a new conversation by copying messages from an         existing conversation starting from a specified message.",
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message_id": {
                                    "type": "string",
                                    "description": "The message ID from which to create the branch."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/messages": {
            "get": {
                "tags": [
                    "Messages"
                ],
                "summary": "Retrieve a list of messages",
                "description": "This endpoint retrieves a list of messages for a specific conversation.\nYou can paginate the results using `first_id` and limit the number of messages returned using `limit`.\n\nGuest Access: ✅ Allowed\n",
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "query",
                        "required": true,
                        "description": "The ID of the conversation to retrieve messages from.",
                        "type": "integer"
                    },
                    {
                        "name": "first_id",
                        "in": "query",
                        "required": false,
                        "description": "The ID of the first message from which to start retrieving. Used for pagination.",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "description": "The number of messages to retrieve. Defaults to 20.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessagesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/message/{message_id}": {
            "delete": {
                "tags": [
                    "Messages"
                ],
                "summary": "Delete a message field or the entire message",
                "description": "Deletes either the query, answer, or the entire message if both are deleted.",
                "parameters": [
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "delete_query": {
                                    "type": "boolean",
                                    "description": "Whether to delete query (optional)."
                                },
                                "delete_answer": {
                                    "type": "boolean",
                                    "description": "Whether to delete answer (optional)."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Messages"
                ],
                "summary": "Update a message",
                "description": "Updates the query and answer fields of the message identified by the given message_id.",
                "parameters": [
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "The updated query text."
                                },
                                "answer": {
                                    "type": "string",
                                    "description": "The updated answer text."
                                }
                            },
                            "required": [
                                "query",
                                "answer"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/bind_workspace": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "bind space",
                "description": "bind space with knowledge collections",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "bind parameters",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "space_id",
                                "bot_id",
                                "description",
                                "collection_name"
                            ],
                            "properties": {
                                "space_id": {
                                    "type": "string"
                                },
                                "bot_id": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "collection_name": {
                                    "type": "string"
                                },
                                "permission": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bind space successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/install_bot": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "bot install",
                "description": "bot install, include chat model, embedding model and knowledge base",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "bot id",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "bot_id"
                            ],
                            "properties": {
                                "bot_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bot install ready",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "boolean"
                                }
                            },
                            "example": {
                                "status": true
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "errcode": 400,
                                "msg": "Invalid bot ID"
                            }
                        }
                    }
                }
            }
        },
        "/api/bot/bot_status_query": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "bot status get",
                "description": "bot status get, include chat model, embedding model and knowledge base progress",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "bot id",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "bot_id"
                            ],
                            "properties": {
                                "bot_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bot status query",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "chat_model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string",
                                            "description": "chat model name"
                                        },
                                        "download_status": {
                                            "type": "string",
                                            "description": "download status"
                                        },
                                        "download_speed": {
                                            "type": "integer",
                                            "description": "download speed"
                                        },
                                        "download_progress": {
                                            "type": "integer",
                                            "description": "download progress, integer"
                                        },
                                        "process_message": {
                                            "type": "string",
                                            "description": "download model fail reason"
                                        }
                                    }
                                },
                                "embedding_model_info_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "model_name": {
                                                "type": "string",
                                                "description": "embedding model name"
                                            },
                                            "download_status": {
                                                "type": "string",
                                                "description": "download status"
                                            },
                                            "download_speed": {
                                                "type": "integer",
                                                "description": "download speed"
                                            },
                                            "download_progress": {
                                                "type": "integer",
                                                "description": "download progress, integer"
                                            },
                                            "process_message": {
                                                "type": "string",
                                                "description": "embedding model fail reason"
                                            },
                                            "provider_status": {
                                                "type": "string",
                                                "description": "provider status",
                                                "example": "not_init | available"
                                            },
                                            "provider": {
                                                "type": "string",
                                                "description": "provider source"
                                            }
                                        }
                                    }
                                },
                                "knowledge_info_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "knowledge_name": {
                                                "type": "string",
                                                "description": "knowledge name"
                                            },
                                            "knowledge_progress": {
                                                "type": "float",
                                                "description": "knowledge progress, float"
                                            },
                                            "knowledge_status": {
                                                "type": "integer",
                                                "description": "knowledge status, waiting is 1, fail is 2, finish is 3"
                                            },
                                            "embedding_model": {
                                                "type": "string",
                                                "description": "knowledge's embedding model"
                                            },
                                            "collection_name": {
                                                "type": "string",
                                                "description": "knowledge collection name"
                                            }
                                        }
                                    }
                                }
                            },
                            "example": {
                                "chat_model_info": {
                                    "model_name": "glm4:9b",
                                    "download_status": "downloading",
                                    "download_speed": 10,
                                    "download_progress": 70,
                                    "process_message": "Error: /home/work/argo/glm:9b is not a directory",
                                    "provider_status": "not_init",
                                    "provider": "Provider openai not settings"
                                },
                                "embedding_model_info_list": [
                                    {
                                        "model_name": "shaw/dmeta-embedding-zh:latest",
                                        "download_status": "downloading",
                                        "download_speed": 20,
                                        "download_progress": 31,
                                        "process_message": "Error: /home/work/argo/dmeta-embedding-zh:latest is not a directory",
                                        "provider_status": "not_init",
                                        "provider": "Provider openai not settings"
                                    }
                                ],
                                "knowledge_info_list": [
                                    {
                                        "knowledge_name": "abc",
                                        "knowledge_progress": 0.25,
                                        "knowledge_status": 1
                                    }
                                ]
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/create_knowledge_base": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "create knowledge base",
                "description": "create knowledge",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "knowledge fields",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "knowledge_name",
                                "description",
                                "embedding_model"
                            ],
                            "properties": {
                                "knowledge_name": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "provider": {
                                    "type": "string"
                                },
                                "embedding_model": {
                                    "type": "string"
                                },
                                "index_type": {
                                    "type": "string"
                                },
                                "metric_type": {
                                    "type": "string"
                                },
                                "params": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "knowledge create successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        },
                                        "collection_name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/create_temp_knowledge_base": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "create temp knowledge base",
                "description": "create temp knowledge",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "knowledge fields",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "knowledge create successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        },
                                        "collection_name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/drop_knowledge_base": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "drop collection",
                "description": "drop collection",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "drop collection name",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "collection_name"
                            ],
                            "properties": {
                                "collection_name": {
                                    "type": "string"
                                },
                                "force": {
                                    "type": "bool"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "drop collection successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/drop_document": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "drop vector partition",
                "description": "drop partition",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "drop partition",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "collection_name",
                                "partition_name"
                            ],
                            "properties": {
                                "collection_name": {
                                    "type": "string"
                                },
                                "partition_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "drop partition successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/get_directory": {
            "get": {
                "tags": [
                    "Doc"
                ],
                "summary": "Get directory",
                "responses": {
                    "200": {
                        "description": "get directory",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "directory": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/knowledge/list_collections": {
            "get": {
                "tags": [
                    "Doc"
                ],
                "summary": "Get all collections",
                "responses": {
                    "200": {
                        "description": "A map of collection to corresponding partition info",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "collection_info": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "knowledge_name": {
                                                "type": "string",
                                                "description": "Knowledge name"
                                            },
                                            "collection_name": {
                                                "type": "string",
                                                "description": "Unique collection name"
                                            },
                                            "description": {
                                                "type": "string",
                                                "description": "Collection description"
                                            },
                                            "embedding_model": {
                                                "type": "string",
                                                "description": "Embedding model to encode text to vector"
                                            },
                                            "index_params": {
                                                "type": "object",
                                                "description": "Vector search index parameters"
                                            },
                                            "create_at": {
                                                "type": "integer",
                                                "description": "Collection creation timestamp"
                                            },
                                            "update_at": {
                                                "type": "integer",
                                                "description": "Collection update timestamp"
                                            },
                                            "partition_info": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "partition_name": {
                                                            "type": "string",
                                                            "description": "Unique partition name"
                                                        },
                                                        "document_name": {
                                                            "type": "string",
                                                            "description": "The document name given by user"
                                                        },
                                                        "document_url": {
                                                            "type": "string",
                                                            "description": "The document server url"
                                                        },
                                                        "file_type": {
                                                            "type": "string",
                                                            "description": "Document file type"
                                                        },
                                                        "description": {
                                                            "type": "string",
                                                            "description": "Description for the document"
                                                        },
                                                        "progress": {
                                                            "type": "float",
                                                            "description": "document process progress"
                                                        },
                                                        "document_status": {
                                                            "type": "int",
                                                            "description": "document status, waiting is 1, fail is 2, finish is 3"
                                                        },
                                                        "create_at": {
                                                            "type": "integer",
                                                            "description": "Document create timestamp"
                                                        },
                                                        "update_at": {
                                                            "type": "integer",
                                                            "description": "Document update timestamp"
                                                        }
                                                    }
                                                },
                                                "description": "Document info list"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/knowledge/list_datasets": {
            "get": {
                "tags": [
                    "Doc"
                ],
                "summary": "Get all datasets",
                "responses": {
                    "200": {
                        "description": "A list of dataset",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "space_id": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "permission": {
                                                "type": "integer"
                                            },
                                            "embedding_model": {
                                                "type": "string"
                                            },
                                            "collection_name": {
                                                "type": "string"
                                            },
                                            "partition_names": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "created_at": {
                                                "type": "integer"
                                            },
                                            "updated_at": {
                                                "type": "integer"
                                            },
                                            "user_id": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/knowledge/list_documents": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "Get document list and collection info by collection name",
                "description": "Get collection detail by its collection name",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "collection name",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "collection_name"
                            ],
                            "properties": {
                                "collection_name": {
                                    "type": "string"
                                },
                                "partition_names": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                        "knowledge_name": {
                                            "type": "string",
                                            "description": "Knowledge name"
                                        },
                                        "collection_name": {
                                            "type": "string",
                                            "description": "Unique collection name"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "Collection description"
                                        },
                                        "provider": {
                                            "type": "string",
                                            "description": "Provider of the embedding_model"
                                        },
                                        "embedding_model": {
                                            "type": "string",
                                            "description": "Embedding model to encode text to vector"
                                        },
                                        "index_params": {
                                            "type": "object",
                                            "description": "Vector search index parameters"
                                        },
                                        "create_at": {
                                            "type": "integer",
                                            "description": "Collection creation timestamp"
                                        },
                                        "update_at": {
                                            "type": "integer",
                                            "description": "Collection update timestamp"
                                        },
                                        "chunk_size": {
                                            "type": "integer",
                                            "description": "Knowledge chunk size"
                                        },
                                        "chunk_overlap": {
                                            "type": "integer",
                                            "description": "Knowledge chunk overlap"
                                        },
                                        "top_k": {
                                            "type": "integer",
                                            "description": "Knowledge result top_k"
                                        },
                                        "partition_info": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "partition_name": {
                                                        "type": "string",
                                                        "description": "Unique partition name"
                                                    },
                                                    "document_name": {
                                                        "type": "string",
                                                        "description": "The document name given by user"
                                                    },
                                                    "document_url": {
                                                        "type": "string",
                                                        "description": "The document server url"
                                                    },
                                                    "file_type": {
                                                        "type": "string",
                                                        "description": "Document file type"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "description": "Description for the document"
                                                    },
                                                    "progress": {
                                                        "type": "float",
                                                        "description": "document process progress"
                                                    },
                                                    "document_status": {
                                                        "type": "int",
                                                        "description": "document status, waiting is 1, fail is 2, finish is 3"
                                                    },
                                                    "msg": {
                                                        "type": "string",
                                                        "description": "if document upload fail, given the fail reason"
                                                    },
                                                    "create_at": {
                                                        "type": "integer",
                                                        "description": "Document create timestamp"
                                                    },
                                                    "update_at": {
                                                        "type": "integer",
                                                        "description": "Document update timestamp"
                                                    }
                                                }
                                            },
                                            "description": "Document info list"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/knowledge/restore_document": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "restore document",
                "description": "restore document",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "restore document and analyse again",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "partition_name"
                            ],
                            "properties": {
                                "partition_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "document update successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/unbind_workspace": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "unbind space",
                "description": "unbind space with knowledge collections",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "unbind parameters",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "space_id",
                                "bot_id",
                                "collection_name"
                            ],
                            "properties": {
                                "space_id": {
                                    "type": "string"
                                },
                                "bot_id": {
                                    "type": "string"
                                },
                                "collection_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "unbind space successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/update_knowledge_base": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "update knowledge base",
                "description": "update knowledge info",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "update fields",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "collection_name",
                                "knowledge_name",
                                "description",
                                "embedding_model",
                                "similarity_threshold",
                                "chunk_size",
                                "chunk_overlap",
                                "top_k"
                            ],
                            "properties": {
                                "collection_name": {
                                    "type": "string"
                                },
                                "knowledge_name": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "embedding_model": {
                                    "type": "string"
                                },
                                "provider": {
                                    "type": "string"
                                },
                                "similarity_threshold": {
                                    "type": "float"
                                },
                                "chunk_size": {
                                    "type": "int"
                                },
                                "chunk_overlap": {
                                    "type": "int"
                                },
                                "top_k": {
                                    "type": "int"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "knowledge update successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/upload_document": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "Upload documents and create partitions",
                "description": "Create partition",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        },
                                        "description": "List of files to upload"
                                    },
                                    "collection_name": {
                                        "type": "string",
                                        "description": "Collection unique name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "file group description"
                                    },
                                    "bot_id": {
                                        "type": "string",
                                        "description": "bot id"
                                    }
                                },
                                "required": [
                                    "files",
                                    "collection_name"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Upload documents successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "description": "When true, all files upload success; when false, some files upload fail"
                                        },
                                        "collection_name": {
                                            "type": "string",
                                            "description": "Collection name"
                                        },
                                        "success_file_names": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Upload success file list"
                                        },
                                        "success_partition_names": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Success partition list"
                                        },
                                        "failed_file_names": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Upload fail file list"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer",
                                            "description": "Error code"
                                        },
                                        "msg": {
                                            "type": "string",
                                            "description": "Error message"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/knowledge/upload_url": {
            "post": {
                "tags": [
                    "Doc"
                ],
                "summary": "update url document",
                "description": "create partition",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "url address",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "collection_name",
                                "url"
                            ],
                            "properties": {
                                "collection_name": {
                                    "type": "string"
                                },
                                "url": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "create url partition successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "description": "url upload status"
                                        },
                                        "collection_name": {
                                            "type": "string",
                                            "description": "collection name"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tool/check_mcp_server": {
            "post": {
                "tags": [
                    "Tool"
                ],
                "summary": "Check MCP Server",
                "description": "Check MCP Server by server id",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MCP Server id",
                        "schema": {
                            "type": "object",
                            "required": [
                                "id"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP Server check ok",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "server_info": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "MCP Server check fail",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tool/create_mcp_server": {
            "post": {
                "tags": [
                    "Tool"
                ],
                "summary": "Create MCP Server",
                "description": "Create MCP Server with the provided details",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MCP Server details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "name",
                                "description",
                                "config_type"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "config_type": {
                                    "type": "string"
                                },
                                "command_type": {
                                    "type": "string"
                                },
                                "json_command": {
                                    "type": "string"
                                },
                                "command": {
                                    "type": "string"
                                },
                                "env": {
                                    "type": "string"
                                },
                                "url": {
                                    "type": "string"
                                },
                                "headers": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP Server created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "bool"
                                },
                                "id": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "MCP Server created fail",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tool/delete_mcp_server": {
            "post": {
                "tags": [
                    "Tool"
                ],
                "summary": "Delete MCP Server",
                "description": "Delete MCP Server with the provided server id",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MCP Server id",
                        "schema": {
                            "type": "object",
                            "required": [
                                "id"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP Server delete successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "bool"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "MCP Server delete fail",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tool/get_mcp_list": {
            "get": {
                "tags": [
                    "Tool"
                ],
                "summary": "Get all MCP Server",
                "description": "Get all MCP Server",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A list of MCP Server",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "server_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "config_type": {
                                                "type": "string"
                                            },
                                            "json_command": {
                                                "type": "string"
                                            },
                                            "command_type": {
                                                "type": "string"
                                            },
                                            "command": {
                                                "type": "string"
                                            },
                                            "env": {
                                                "type": "string"
                                            },
                                            "url": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/tool/mcp_tool_install": {
            "get": {
                "tags": [
                    "Tool"
                ],
                "summary": "Install Mcp tool: bun,uv",
                "description": "download and install mcp tool(bun,uv) to .argo dir",
                "responses": {
                    "200": {
                        "description": "Mcp tool install triggered successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "bun": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "uv": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/tool/mcp_tool_install_status": {
            "get": {
                "tags": [
                    "Tool"
                ],
                "summary": "Mcp tool install status: bun,uv description: get mcp tool install status(bun,uv)",
                "responses": {
                    "200": {
                        "description": "Mcp tool install status: installed, uninstalled, installing",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "bun": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "uv": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tool/update_mcp_server": {
            "post": {
                "tags": [
                    "Tool"
                ],
                "summary": "Update MCP Server",
                "description": "Update MCP Server with the provided details",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "MCP Server details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "id"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "command_type": {
                                    "type": "string"
                                },
                                "command": {
                                    "type": "string"
                                },
                                "env": {
                                    "type": "string"
                                },
                                "url": {
                                    "type": "string"
                                },
                                "enable": {
                                    "type": "bool"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP Server update success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "bool"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "MCP Server update fail",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/file/remove": {
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "delete file from our system",
                "description": "delete file",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "delete info",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "file_id"
                            ],
                            "properties": {
                                "file_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "delete file successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/file/upload": {
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Upload a file",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file_path": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "file_id": {
                                            "type": "string"
                                        },
                                        "file_name": {
                                            "type": "string"
                                        },
                                        "file_url": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to upload file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/file/upload_multiple": {
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Upload multiple files",
                "description": "Handles the upload of multiple files and stores them.",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "in": "formData",
                        "name": "files",
                        "description": "List of files to upload",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "file"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Files uploaded successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "files": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "file_id": {
                                                "type": "string"
                                            },
                                            "file_name": {
                                                "type": "string"
                                            },
                                            "file_url": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No files uploaded"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "description": "Health check endpoint. Can be accessed via GET or POST.\nReturns current server timestamp in both integer and formatted string formats.\n",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Health check response with current timestamp.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "object",
                                    "properties": {
                                        "timestamp": {
                                            "type": "integer"
                                        },
                                        "timestamp-str": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "description": "Health check endpoint. Can be accessed via GET or POST.\nReturns current server timestamp in both integer and formatted string formats.\n",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Health check response with current timestamp.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer",
                                    "description": "Status code, 0 means success.",
                                    "example": 0
                                },
                                "msg": {
                                    "type": "object",
                                    "properties": {
                                        "timestamp": {
                                            "type": "integer",
                                            "description": "Current UNIX timestamp.",
                                            "example": 1717660800
                                        },
                                        "timestamp-str": {
                                            "type": "string",
                                            "description": "Human-readable timestamp.",
                                            "example": "2025-06-06 20:00:00"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/model/change_model_category": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Change model category",
                "description": "Change model category",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name",
                                "category"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                },
                                "category": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "modelfile_content": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/model/change_model_status": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Change model status",
                "description": "Change model status",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name",
                                "status"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/clean_model_cache": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Delete model cache",
                "description": "Delete model cache of the provided name",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/delete_model": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Delete model",
                "description": "Delete model of the provided name",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/download_model": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Download model",
                "description": "Download model of the provided repository",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Repo details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "repo_id"
                            ],
                            "properties": {
                                "repo_id": {
                                    "type": "string"
                                },
                                "gguf_file": {
                                    "type": "string"
                                },
                                "model_name": {
                                    "type": "string"
                                },
                                "modelfile": {
                                    "type": "string"
                                },
                                "quantization_level": {
                                    "type": "string",
                                    "enum": [
                                        "f32",
                                        "f16",
                                        "bf16",
                                        "q8_0"
                                    ],
                                    "default": "f16"
                                },
                                "use_xunlei": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string"
                                        },
                                        "source": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/download_model_ollama": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Download model",
                "description": "Download model of the provided repository",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Repo details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                },
                                "size": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string"
                                        },
                                        "source": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "warning_msg": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/get_model_info": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Get model info",
                "description": "Get model information of the provided name",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "model_name": {
                                            "type": "string"
                                        },
                                        "ollama_model_name": {
                                            "type": "string"
                                        },
                                        "ollama_architecture": {
                                            "type": "string"
                                        },
                                        "digest": {
                                            "type": "string"
                                        },
                                        "source": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "size": {
                                            "type": "integer"
                                        },
                                        "model_fmt": {
                                            "type": "string"
                                        },
                                        "quantization_level": {
                                            "type": "string"
                                        },
                                        "is_generation": {
                                            "type": "boolean"
                                        },
                                        "is_embeddings": {
                                            "type": "boolean"
                                        },
                                        "download_status": {
                                            "type": "string",
                                            "enum": [
                                                "download_waiting",
                                                "downloading",
                                                "download_complete",
                                                "convert_complete",
                                                "import_complete",
                                                "all_complete",
                                                "download_failed",
                                                "convert_failed",
                                                "import_failed",
                                                "not_available"
                                            ]
                                        },
                                        "download_speed": {
                                            "type": "integer"
                                        },
                                        "download_progress": {
                                            "type": "integer"
                                        },
                                        "download_info": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        },
                                        "process_message": {
                                            "type": "string"
                                        },
                                        "updated_at": {
                                            "type": "integer"
                                        },
                                        "created_at": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/get_model_list": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Get model list",
                "description": "Get all model list",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model Status details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "is_generation": {
                                    "type": "boolean"
                                },
                                "is_embeddings": {
                                    "type": "boolean"
                                },
                                "download_status": {
                                    "type": "string",
                                    "enum": [
                                        "download_waiting",
                                        "downloading",
                                        "download_complete",
                                        "convert_complete",
                                        "import_complete",
                                        "all_complete",
                                        "download_failed",
                                        "convert_failed",
                                        "import_failed",
                                        "not_available"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "model_name": {
                                                "type": "string"
                                            },
                                            "ollama_model_name": {
                                                "type": "string"
                                            },
                                            "ollama_architecture": {
                                                "type": "string"
                                            },
                                            "modelfile_content": {
                                                "type": "string"
                                            },
                                            "digest": {
                                                "type": "string"
                                            },
                                            "source": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "category": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "parameter": {
                                                "type": "string"
                                            },
                                            "size": {
                                                "type": "integer"
                                            },
                                            "model_fmt": {
                                                "type": "string"
                                            },
                                            "quantization_level": {
                                                "type": "string"
                                            },
                                            "is_generation": {
                                                "type": "boolean"
                                            },
                                            "is_embeddings": {
                                                "type": "boolean"
                                            },
                                            "download_status": {
                                                "type": "string",
                                                "enum": [
                                                    "download_waiting",
                                                    "downloading",
                                                    "download_complete",
                                                    "convert_complete",
                                                    "import_complete",
                                                    "all_complete",
                                                    "download_failed",
                                                    "convert_failed",
                                                    "import_failed",
                                                    "not_available"
                                                ]
                                            },
                                            "download_speed": {
                                                "type": "integer"
                                            },
                                            "download_progress": {
                                                "type": "integer"
                                            },
                                            "download_info": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "type": "string"
                                                }
                                            },
                                            "process_message": {
                                                "type": "string"
                                            },
                                            "updated_at": {
                                                "type": "integer"
                                            },
                                            "created_at": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/get_popular_model": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Get popular model list",
                "description": "Get ollama popular model list",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "search keyword",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "search_key": {
                                    "type": "string",
                                    "description": "search keyword",
                                    "example": "llama3"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "model_name": {
                                                "type": "string",
                                                "description": "The name of the model",
                                                "example": "abc"
                                            },
                                            "desc": {
                                                "type": "string",
                                                "description": "Description of the model",
                                                "example": "this is description"
                                            },
                                            "size": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "description": "Available sizes",
                                                "example": [
                                                    "0.5B",
                                                    "7B"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/ollama_service_check": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Check ollama service",
                "description": "Check whether ollama service is available or not",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Ollama url",
                        "schema": {
                            "type": "object",
                            "required": [
                                "base_url"
                            ],
                            "properties": {
                                "base_url": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ollama service available",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "bool"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Ollama service check fail",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "msg": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/model/parse_model_url": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Parse model url",
                "description": "Parse model information of the provided url",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Url details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "repo"
                            ],
                            "properties": {
                                "repo": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "repo_id": {
                                    "type": "string"
                                },
                                "model_template": {
                                    "type": "string"
                                },
                                "warning_msg": {
                                    "type": "string"
                                },
                                "repo_file_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "size": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                },
                                "gguf_file_list": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "size": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/model/update_model_name": {
            "post": {
                "tags": [
                    "Model"
                ],
                "summary": "Update model info",
                "description": "Update model information",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Model details",
                        "schema": {
                            "type": "object",
                            "required": [
                                "model_name"
                            ],
                            "properties": {
                                "model_name": {
                                    "type": "string"
                                },
                                "new_model_name": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "download_status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "model_info": {
                                    "type": "object",
                                    "properties": {
                                        "model_name": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "download_status": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Process error"
                    }
                }
            }
        },
        "/api/tts/tts": {
            "post": {
                "tags": [
                    "TTS"
                ],
                "summary": "Get tts audio with text",
                "description": "Get tts audio with tts_type, tts_params(text/voice/rate/volume).\n\nGuest Access: ✅ Allowed\n",
                "parameters": [
                    {
                        "name": "tts_type",
                        "in": "query",
                        "required": true,
                        "description": "TTS type('edge_tts', other tts).",
                        "type": "string"
                    },
                    {
                        "name": "tts_params",
                        "in": "query",
                        "required": true,
                        "description": "TTS Params, for edge_tts(text/voice/rate/volume).",
                        "type": "object",
                        "properties": {
                            "text": {
                                "type": "string",
                                "description": "Text to speech."
                            },
                            "voice": {
                                "type": "string",
                                "description": "Speech voice, default: 'zh-CN-XiaoyiNeural'."
                            },
                            "rate": {
                                "type": "string",
                                "description": "Speech rate (range: -100% to +100%);"
                            },
                            "volume": {
                                "type": "string",
                                "description": "Speech volume (range: -100% to +100%)."
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "base64 encoded audio message, {'status': 0, 'data': base64str}",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "data": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tts/voices": {
            "post": {
                "tags": [
                    "TTS"
                ],
                "summary": "Get tts voices with tts_type",
                "description": "\"Get tts voices with tts_type: 'edge_tts'.\"\n\nGuest Access: ✅ Allowed\n",
                "parameters": [
                    {
                        "name": "tts_type",
                        "in": "query",
                        "required": true,
                        "description": "TTS type('edge_tts', other tts).",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "voices of tts_type: {'status': 0, 'data': voices}, voices is a list",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "ShortName": {
                                                "type": "string",
                                                "description": "Voice shortname"
                                            },
                                            "Gender": {
                                                "type": "string",
                                                "description": "Voice with Gender"
                                            },
                                            "Locale": {
                                                "type": "string",
                                                "description": "Voice with Locale"
                                            },
                                            "SuggestedCodec": {
                                                "type": "string",
                                                "description": "Recommended SuggestedCodec"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/get_changelog": {
            "get": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Get update log",
                "description": "Get update log",
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/get_category": {
            "get": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Get category list",
                "description": "Get category list",
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/{workspace_id}/model-providers": {
            "delete": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Delete a custom model provider in workspace",
                "description": "Delete custom model provider.",
                "requestBody": {
                    "description": "Delete provider data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteCustomProvider"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Bot"
                ],
                "summary": "Get a list of model providers for a workspace",
                "description": "This endpoint retrieves a list of all model providers and their         credentials for a specified workspace.",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Add a custom model provider in workspace",
                "description": "Add custom model provider.",
                "requestBody": {
                    "description": "Add provider data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddCustomProvider"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/{workspace_id}/members": {
            "delete": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Remove a member from a workspace",
                "description": "Deletes a member from the specified workspace.",
                "parameters": [
                    {
                        "name": "workspace_id",
                        "in": "path",
                        "description": "The ID of the workspace",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "required": true,
                        "name": "body",
                        "schema": {
                            "$ref": "#/components/schemas/DeleteMember"
                        },
                        "description": "JSON payload containing the user ID to remove"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Get all members of current workspace.",
                "parameters": [
                    {
                        "name": "workspace_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of members",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Add member to a workspace via email",
                "description": "This endpoint allows you to add member to a workspace via email.",
                "parameters": [
                    {
                        "name": "workspace_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "required": true,
                        "name": "body",
                        "schema": {
                            "$ref": "#/components/schemas/AddMember"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/{workspace_id}/model_of_provider": {
            "delete": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Delete a model provider model",
                "description": "This endpoint delete a model for this provider.",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "workspace_id",
                        "required": true,
                        "type": "string",
                        "description": "The ID of the workspace where the model provider will be updated."
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "provider": {
                                    "type": "string",
                                    "example": "ollama",
                                    "description": "The name of the model provider."
                                },
                                "custom_name": {
                                    "type": "string",
                                    "example": "customapi",
                                    "description": "The custom name for the model."
                                },
                                "model": {
                                    "type": "string",
                                    "example": "llama3.1",
                                    "description": "The model name for the provider."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model provider successfully updated.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "string",
                                    "example": "success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid input data.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Invalid provider or model."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Workspace not found.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Workspace not found."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "An unexpected error occurred."
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Add a model provider model",
                "description": "This endpoint adds a new model for this provider.",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "workspace_id",
                        "required": true,
                        "type": "string",
                        "description": "The ID of the workspace where the model provider will be updated."
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "provider": {
                                    "type": "string",
                                    "example": "ollama",
                                    "description": "The name of the model provider."
                                },
                                "custom_name": {
                                    "type": "string",
                                    "example": "customapi",
                                    "description": "The custom name for the model."
                                },
                                "model": {
                                    "type": "string",
                                    "example": "llama3.1",
                                    "description": "The model name for the provider."
                                },
                                "category": {
                                    "type": "string",
                                    "example": "tools",
                                    "description": "The category of the model."
                                },
                                "method": {
                                    "type": "string",
                                    "example": "add",
                                    "description": "Add or Change model category."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model provider successfully updated.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "string",
                                    "example": "success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid input data.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Invalid provider or model."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Workspace not found.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Workspace not found."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "An unexpected error occurred."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/set_language": {
            "post": {
                "tags": [
                    "Workspace"
                ],
                "summary": "set language",
                "description": "set language",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "language fields",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "language"
                            ],
                            "properties": {
                                "language": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "shift language successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errcode": {
                                            "type": "integer"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspaces/{workspace_id}/provider_verify": {
            "post": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Verify model provider in workspace",
                "description": "Verify model provider.",
                "requestBody": {
                    "description": "Verify provider data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyProvider"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; Check `errors` for any validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/workspace/list": {
            "get": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Get all workspaces",
                "responses": {
                    "200": {
                        "description": "A list of spaces",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "current": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/workspaces/switch": {
            "post": {
                "tags": [
                    "Workspace"
                ],
                "summary": "Switch the user's workspace",
                "description": "Switch the user's current workspace to the specified workspace_id.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The workspace to switch to.",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "workspace_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully switched to the specified workspace.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or failed to switch workspace.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errcode": {
                                    "type": "integer",
                                    "example": 400
                                },
                                "msg": {
                                    "type": "string",
                                    "example": "Missing required field: workspace_id"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/config": {
            "get": {
                "tags": [
                    "Config"
                ],
                "summary": "Retrieve current system configuration",
                "description": "This endpoint returns the current configuration for the Argo system,\nYou can use this to configure frontend features based on server capabilities.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request; check `errors` for any validation issues",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "openapi": "3.0.2",
    "components": {
        "schemas": {
            "Login": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "BaseError": {
                "type": "object",
                "properties": {
                    "errcode": {
                        "type": "integer"
                    },
                    "msg": {
                        "type": "string"
                    }
                },
                "required": [
                    "errcode",
                    "msg"
                ]
            },
            "GuestToken": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ]
            },
            "Register": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "password",
                    "username"
                ]
            },
            "Site": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    }
                }
            },
            "CreateBot": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "space_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string",
                        "default": "/api/files/resources/icons/bot.jpeg"
                    },
                    "category": {
                        "type": "string",
                        "default": "assistant"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true
                    },
                    "locked": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "background_img": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string",
                        "readOnly": true
                    },
                    "site": {
                        "$ref": "#/components/schemas/Site"
                    },
                    "created_at": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "space_id"
                ]
            },
            "Bot": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "space_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string",
                        "default": "/api/files/resources/icons/bot.jpeg"
                    },
                    "category": {
                        "type": "string",
                        "default": "assistant"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true
                    },
                    "locked": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "background_img": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string",
                        "readOnly": true
                    },
                    "site": {
                        "$ref": "#/components/schemas/Site"
                    },
                    "created_at": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "space_id"
                ]
            },
            "CompletionParams": {
                "type": "object",
                "properties": {
                    "temperature": {
                        "type": "number",
                        "nullable": true
                    },
                    "top_p": {
                        "type": "number",
                        "nullable": true
                    },
                    "top_k": {
                        "type": "number",
                        "nullable": true
                    },
                    "repeat_penalty": {
                        "type": "number",
                        "nullable": true
                    },
                    "num_predict": {
                        "type": "number",
                        "nullable": true
                    },
                    "mirostat": {
                        "type": "number",
                        "nullable": true
                    },
                    "mirostat_eta": {
                        "type": "number",
                        "nullable": true
                    },
                    "mirostat_tau": {
                        "type": "number",
                        "nullable": true
                    },
                    "num_ctx": {
                        "type": "number",
                        "nullable": true
                    },
                    "num_gpu": {
                        "type": "number",
                        "nullable": true
                    },
                    "repeat_last_n": {
                        "type": "number",
                        "nullable": true
                    },
                    "tfs_z": {
                        "type": "number",
                        "nullable": true
                    },
                    "stop": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true
                    }
                }
            },
            "Model": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "model_id": {
                        "type": "string"
                    },
                    "icon_url": {
                        "type": "string"
                    },
                    "base_url": {
                        "type": "string"
                    },
                    "link_msg": {
                        "type": "string"
                    },
                    "link_url": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "origin_url": {
                        "type": "string"
                    },
                    "completion_params": {
                        "$ref": "#/components/schemas/CompletionParams"
                    }
                }
            },
            "Paragraph": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "variable": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "default": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "TextInput": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "variable": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "max_length": {
                        "type": "integer"
                    },
                    "default": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "Select": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "variable": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "Number": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "variable": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "default": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "UserInputFormItem": {
                "type": "object",
                "properties": {
                    "paragraph": {
                        "$ref": "#/components/schemas/Paragraph"
                    },
                    "text-input": {
                        "$ref": "#/components/schemas/TextInput"
                    },
                    "select": {
                        "$ref": "#/components/schemas/Select"
                    },
                    "number": {
                        "$ref": "#/components/schemas/Number"
                    }
                }
            },
            "AgentTool": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "doc_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "AgentMode": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "tools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentTool"
                        }
                    },
                    "max_iteration": {
                        "type": "integer"
                    },
                    "prompt": {
                        "type": "string",
                        "nullable": true
                    },
                    "strategy": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ToolConfigItem": {
                "type": "object",
                "properties": {
                    "tool_type": {
                        "type": "string"
                    },
                    "provider": {
                        "type": "string"
                    },
                    "tool_name": {
                        "type": "string"
                    },
                    "tool_id": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "TTSPlugin": {
                "type": "object",
                "properties": {
                    "enable": {
                        "type": "boolean"
                    },
                    "voice": {
                        "type": "string"
                    }
                }
            },
            "Live2DPlugin": {
                "type": "object",
                "properties": {
                    "enable": {
                        "type": "boolean"
                    },
                    "model": {
                        "type": "string"
                    }
                }
            },
            "PluginConfig": {
                "type": "object",
                "properties": {
                    "tts": {
                        "$ref": "#/components/schemas/TTSPlugin"
                    },
                    "live2d": {
                        "$ref": "#/components/schemas/Live2DPlugin"
                    }
                }
            },
            "ModelConfig": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "model_id": {
                        "type": "string"
                    },
                    "configs": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "model": {
                        "$ref": "#/components/schemas/Model"
                    },
                    "user_input_form": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserInputFormItem"
                        }
                    },
                    "pre_prompt": {
                        "type": "string"
                    },
                    "advanced_prompt": {
                        "type": "string"
                    },
                    "prologue": {
                        "type": "string"
                    },
                    "agent_mode": {
                        "$ref": "#/components/schemas/AgentMode"
                    },
                    "prompt_type": {
                        "type": "string"
                    },
                    "network": {
                        "type": "boolean"
                    },
                    "tool_config": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ToolConfigItem"
                        }
                    },
                    "plugin_config": {
                        "$ref": "#/components/schemas/PluginConfig"
                    },
                    "silly_character": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            },
            "BotModelConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "space_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string",
                        "default": "/api/files/resources/icons/bot.jpeg"
                    },
                    "category": {
                        "type": "string",
                        "default": "assistant"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true
                    },
                    "locked": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "background_img": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string",
                        "readOnly": true
                    },
                    "site": {
                        "$ref": "#/components/schemas/Site"
                    },
                    "created_at": {
                        "type": "string",
                        "readOnly": true
                    },
                    "model_config": {
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelConfig"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "space_id"
                ]
            },
            "ListBot": {
                "type": "object",
                "properties": {
                    "space_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "space_id"
                ]
            },
            "DeleteBot": {
                "type": "object",
                "properties": {
                    "bot_id": {
                        "type": "string"
                    },
                    "space_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "bot_id",
                    "space_id"
                ]
            },
            "BaseSuccess": {
                "type": "object",
                "properties": {
                    "errcode": {
                        "default": -1,
                        "description": "-1 indicates success"
                    },
                    "msg": {
                        "type": "string",
                        "description": "Success message"
                    }
                },
                "required": [
                    "errcode",
                    "msg"
                ]
            },
            "ImportBots": {
                "type": "object",
                "properties": {
                    "bots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Bot"
                        }
                    }
                }
            },
            "UpdateKnowledge": {
                "type": "object",
                "properties": {
                    "bot_id": {
                        "type": "string"
                    },
                    "collection_name": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "embedding_model": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "bot_id"
                ]
            },
            "UpdateModelConfig": {
                "type": "object",
                "properties": {
                    "bot_id": {
                        "type": "string"
                    },
                    "model_config": {
                        "$ref": "#/components/schemas/ModelConfig"
                    }
                },
                "required": [
                    "bot_id",
                    "model_config"
                ]
            },
            "UpdateModelConfigResponse": {
                "type": "object",
                "properties": {
                    "errcode": {
                        "default": -1,
                        "description": "-1 indicates success"
                    },
                    "msg": {
                        "type": "string",
                        "description": "Success message"
                    },
                    "bot_id": {
                        "type": "string"
                    },
                    "config": {
                        "type": "string"
                    },
                    "warning_msg": {
                        "type": "string"
                    }
                },
                "required": [
                    "bot_id",
                    "config",
                    "errcode",
                    "msg"
                ]
            },
            "File": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "transfer_method": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "SayChat": {
                "type": "object",
                "properties": {
                    "invoke_from": {
                        "type": "string"
                    },
                    "bot_id": {
                        "type": "string"
                    },
                    "conversation_id": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "stream": {
                        "type": "boolean"
                    },
                    "space_id": {
                        "type": "string"
                    },
                    "regen_message_id": {
                        "type": "string"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/File"
                        }
                    },
                    "mode": {
                        "type": "string"
                    },
                    "model_config": {
                        "$ref": "#/components/schemas/ModelConfig"
                    }
                },
                "required": [
                    "bot_id",
                    "message"
                ]
            },
            "WebSayChat": {
                "type": "object",
                "properties": {
                    "invoke_from": {
                        "type": "string"
                    },
                    "conversation_id": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "stream": {
                        "type": "boolean"
                    },
                    "regen_message_id": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string"
                    }
                },
                "required": [
                    "message"
                ]
            },
            "StopChat": {
                "type": "object",
                "properties": {
                    "task_id": {
                        "type": "string"
                    },
                    "message_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "message_id",
                    "task_id"
                ]
            },
            "ConversationItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "bot_id": {
                        "type": "string"
                    },
                    "model_config_id": {
                        "type": "string"
                    },
                    "model_id": {
                        "type": "string"
                    },
                    "model_provider": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "datasets": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentTool"
                        }
                    },
                    "agent_mode": {
                        "$ref": "#/components/schemas/AgentMode"
                    },
                    "bot_name": {
                        "readOnly": true
                    },
                    "bot_icon": {
                        "readOnly": true
                    },
                    "latest_answer": {
                        "readOnly": true
                    }
                },
                "required": [
                    "bot_id",
                    "id",
                    "model_config_id",
                    "model_id",
                    "name"
                ]
            },
            "GetConversationsResponse": {
                "type": "object",
                "properties": {
                    "has_more": {
                        "type": "boolean"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConversationItem"
                        }
                    }
                }
            },
            "MessageItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "bot_id": {
                        "type": "string"
                    },
                    "conversation_id": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "answer": {
                        "type": "string"
                    },
                    "message_tokens": {
                        "type": "integer"
                    },
                    "answer_tokens": {
                        "type": "integer"
                    },
                    "is_stopped": {
                        "type": "boolean"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/File"
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "answer",
                    "answer_tokens",
                    "bot_id",
                    "conversation_id",
                    "created_at",
                    "files",
                    "id",
                    "is_stopped",
                    "message_tokens",
                    "query"
                ]
            },
            "GetMessagesResponse": {
                "type": "object",
                "properties": {
                    "has_more": {
                        "type": "boolean"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageItem"
                        }
                    }
                },
                "required": [
                    "data",
                    "has_more",
                    "limit"
                ]
            },
            "DeleteCustomProvider": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    }
                },
                "required": [
                    "provider"
                ]
            },
            "CategoryDetail": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "icon_color": {
                        "type": "string"
                    }
                },
                "required": [
                    "category"
                ]
            },
            "CategoryLabel": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryDetail"
                        }
                    }
                },
                "required": [
                    "category"
                ]
            },
            "Category": {
                "type": "object",
                "properties": {
                    "category_label": {
                        "$ref": "#/components/schemas/CategoryLabel"
                    }
                },
                "required": [
                    "category_label"
                ]
            },
            "SimpleModel": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    }
                },
                "required": [
                    "model"
                ]
            },
            "Credentials": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "custom_name": {
                        "type": "string"
                    },
                    "default_model": {
                        "type": "string"
                    },
                    "base_url": {
                        "type": "string"
                    },
                    "api_key": {
                        "type": "string"
                    },
                    "origin_url": {
                        "type": "string",
                        "nullable": true
                    },
                    "support_chat_models": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SimpleModel"
                        }
                    },
                    "support_embedding_models": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SimpleModel"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "link_url": {
                        "type": "string",
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "link_msg": {
                        "type": "string",
                        "nullable": true
                    },
                    "icon_url": {
                        "type": "string"
                    },
                    "enable": {
                        "type": "integer"
                    }
                }
            },
            "ProviderItem": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "custom_name": {
                        "type": "string"
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/Credentials"
                    },
                    "enable": {
                        "type": "integer"
                    }
                }
            },
            "ProviderList": {
                "type": "object",
                "properties": {
                    "model_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderItem"
                        }
                    },
                    "not_added_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderItem"
                        }
                    }
                }
            },
            "AddCustomProvider": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/Credentials"
                    }
                },
                "required": [
                    "credentials",
                    "provider"
                ]
            },
            "DeleteMember": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "The UUID of the user to be deleted"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "WorkspaceMember": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Member ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Member name"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Member email"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Creation timestamp in ISO format"
                    },
                    "role": {
                        "type": "string",
                        "description": "Role of the member"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the member"
                    }
                },
                "required": [
                    "created_at",
                    "email",
                    "id",
                    "name",
                    "role",
                    "status"
                ]
            },
            "AddMember": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The member's email address"
                    },
                    "role": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The role of the member"
                    }
                },
                "required": [
                    "email",
                    "role"
                ]
            },
            "VerifyProvider": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/Credentials"
                    },
                    "model_name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "credentials",
                    "provider"
                ]
            },
            "ConfigItem": {
                "type": "object",
                "properties": {
                    "enable_multi_user": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enable_multi_user"
                ]
            }
        }
    }
}